generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  STUDENT
  HOSTEL_OWNER
}

model User {
  id             String   @id @unique
  ProfileImage   String?
  email          String
  firstName      String
  lastName       String
  role           UserRole @default(STUDENT)
  Hostel         Hostel[]
  Favorite       Favorite[]
  Booking        Booking[]
  PaymentAttempt PaymentAttempt[]
}

model Hostel {
  id               String   @id @default(uuid())
  title            String?
  guests           String?
  Kitchen          String?
  bathrooms        String?
  photos           String[]
  price            Int?
  UserId           String
  createdAT        DateTime @default(now())
  addedCategory    Boolean  @default(false)
  addedDescription Boolean  @default(false)
  addedLocation    Boolean  @default(false)
  categoryName     String?  // General hostel category (e.g. "Wifi", "trending")
  description      String?
  location         String?
  // Added latitude and longitude for precise location
  latitude       Float?
  longitude      Float?
  // Added location_name for user-friendly display
  location_name    String?
  // Owner contact details
  contactPhone     String?
  contactEmail     String?
  contactWhatsapp  String?
  contactHidden    Boolean  @default(true)  // Whether contact info is hidden until payment
  User             User?    @relation(fields: [UserId], references: [id])
  Favorite         Favorite[]
  Booking          Booking[]
  // New relationship with RoomCategory
  RoomCategory     RoomCategory[]
  PaymentAttempt   PaymentAttempt[]
}

model Favorite {
  id       String   @id @default(uuid())
  User     User?    @relation(fields: [userId], references: [id])
  userId   String?
  hostel   Hostel?  @relation(fields: [hostelId], references: [id])
  hostelId String?
  createAt DateTime @default(now())
}

model Booking {
  id             String        @id @default(uuid())
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime      @default(now())
  User           User?         @relation(fields: [userId], references: [id])
  userId         String?
  Hostel         Hostel?       @relation(fields: [hostelId], references: [id])
  hostelId       String?
  RoomCategory   RoomCategory? @relation(fields: [roomCategoryId], references: [id])
  roomCategoryId String?
}

model RoomCategory {
  id             String    @id @default(uuid())
  name           String    // e.g., "shared", "single", "deluxe"
  price          Int       // Price per semester for this category
  availableRooms Int       // Number of available rooms in this category
  totalRooms     Int       // Total number of rooms in this category
  hostel         Hostel    @relation(fields: [hostelId], references: [id], onDelete: Cascade)
  hostelId       String
  description    String?   // Optional description of room features
  photos         String[]  // Photos specific to this room type
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Booking        Booking[]
  PaymentAttempt PaymentAttempt[]
}

enum PaymentStatus {
  PENDING
  PENDING_CONFIRMATION
  COMPLETED
  FAILED
}

model PaymentAttempt {
  id             String        @id @default(uuid())
  referenceCode  String        @unique // Generated unique code for tracking payment
  amount         Int           @default(5000) // Fixed fee of 5000 UGX
  status         PaymentStatus @default(PENDING)
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  hostel         Hostel        @relation(fields: [hostelId], references: [id])
  hostelId       String
  roomCategory   RoomCategory  @relation(fields: [roomCategoryId], references: [id])
  roomCategoryId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}